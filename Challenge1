There are 3 challenges, each on a separate page. The clue derived from each page will provide instructions for the next challenge.

Challenge 1:

The prompt below is encoded in a simple format. Decode it to get the prompt for Challenge 2.

import Foundation

let prompt = """
R3JlYXQgam9iISAKCk5leHQgd2UndmUgaG9zdGVkIGEgSlNPTiBmaWxlIGF0IGF0IHRoaXMgdXJsOiBodHRwczovL2FwaS5qc29uYmluLmlvL3YzL2IvNjQ2YmVkMzI4ZTRhYTYyMjVlYTIyYTc5LiBZb3VyIGpvYiBpcyB0byB3cml0ZSBhIHNjcmlwdCB0bwpkb3dubG9hZCB0aGUgY29udGVudHMgb2YgdGhlIFVSTCAoaGludDogVGhlIFgtQUNDRVNTLUtFWSBpcyAkMmIkMTAkS2UxaXdpZUZPNy83cXNTS1UuR1lVLm9ZWFpNVzFFZUhyd2Q0eHg5eWxib0ppazVtc3RaazYpCnNvcnQgdGhlIGRhdGEgYnkgZWFjaCBlbGVtZW50cyAnYmFyJyBrZXkKZmlsdGVyIG91dCBlbGVtZW50cyB3aGVyZSAnYmF6JyBpcyBub3QgZGl2aXNpYmxlIGJ5IDMKY29uY2F0ZW5hdGUgZWFjaCBlbGVtZW50cyAnZm9vJyB2YWx1ZQoKRG8gZWFjaCBvZiB0aGVzZSBzdGVwcyB0byByZXZlYWwgdGhlIGluc3RydWN0aW9ucyBmb3IgdGhlIGZpbmFsIHBhcnQuIFJlbWVtYmVyIHRvIHNob3cgeW91ciB3b3JrIQ==
"""

guard let data = Data(base64Encoded: prompt) else {
    print("Failed to decode the prompt.")
    exit(0)
}

if let decodedString = String(data: data, encoding: .utf8) {
    print(decodedString)
} else {
    print("Failed to convert data to UTF-8 string.")
}

Challenge 2:

Get the prompt from Challenge 1 and paste it below. Solve the challenge to get the prompt for Challenge 3.

Next we've hosted a JSON file at at this url: https://api.jsonbin.io/v3/b/646bed328e4aa6225ea22a79. Your job is to write a script to
download the contents of the URL (hint: The X-ACCESS-KEY is $2b$10$Ke1iwieFO7/7qsSKU.GYU.oYXZMW1EeHrwd4xx9ylboJik5mstZk6)
sort the data by each elements 'bar' key, filter out elements where 'baz' is not divisible by 3, concatenate each elements 'foo' value

Do each of these steps to reveal the instructions for the final part. Remember to show your work!

import Foundation
import PlaygroundSupport

let url = URL(string: "https://api.jsonbin.io/v3/b/646bed328e4aa6225ea22a79")!
let accessKey = "$2b$10$Ke1iwieFO7/7qsSKU.GYU.oYXZMW1EeHrwd4xx9ylboJik5mstZk6"

struct Item: Codable {
    let foo: String
    let bar: Int
    let baz: Int
}

func downloadData(from url: URL, accessKey: String, completion: @escaping (Result<Data, Error>) -> Void) {
    var request = URLRequest(url: url)
    request.setValue(accessKey, forHTTPHeaderField: "X-Access-Key")

    URLSession.shared.dataTask(with: request) { data, response, error in
        if let error = error {
            completion(.failure(error))
            return
        }

        guard let data = data else {
            completion(.failure(NSError(domain: "", code: 0, userInfo: nil)))
            return
        }

        completion(.success(data))
    }.resume()
}

downloadData(from: url, accessKey: accessKey) { result in
    switch result {
    case .success(let data):
        do {
            let jsonObject = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]
            
            guard let record = jsonObject?["record"] as? [String: Any],
                  let dataArray = record["data"] as? [[String: Any]] else {
                print("Failed to retrieve data from JSON")
                return
            }
            
            let items = try JSONSerialization.data(withJSONObject: dataArray, options: [])
            let response = try JSONDecoder().decode([Item].self, from: items)
            
            // Sort the data by the 'bar' key
            let sortedData = response.sorted(by: { $0.bar < $1.bar })
            
            // Filter out elements where 'baz' is not divisible by 3
            let filteredData = sortedData.filter { $0.baz % 3 == 0 }
            
            // Concatenate each element's 'foo' value
            let concatenatedString = filteredData.reduce("", { $0 + $1.foo })
            
            print("Decoded Message:", concatenatedString)
        } catch {
            print("Failed to decode JSON:", error)
        }
    case .failure(let error):
        print("Failed to download data:", error)
    }

    PlaygroundPage.current.finishExecution()
}
PlaygroundPage.current.needsIndefiniteExecution = true

Challenge 3

Get the prompt from Challenge 2 and paste it below. Solve the challenge, and take a screenshot of the rendered view. Include the screenshot of the view in your submission!

Concatenated String: Nice Work! For the final challenge, update ContentView.body to display a smiley face using only native SwiftUI views (no Sf Symbols or emojis).

import Foundation
import SwiftUI
import PlaygroundSupport

struct ContentView: View {
    var body: some View {
        VStack(spacing: 30) {
            ZStack {
                //Make the face circle
                Circle()
                    .foregroundColor(.blue)
                    .frame(width: 125, height: 125)
                
               //Make the first eye
               Circle()
                    .foregroundColor(.white)
                    .frame(width: 25, height: 25)
                    .offset(x: -25, y: -20)
                
                //Make the other eye
                Circle()
                    .foregroundColor(.white)
                    .frame(width: 25, height: 25)
                    .offset(x: 25, y: -20)
                    
                //Make the mouth
                Path { path in
                    path.move(to: CGPoint(x: -30, y: 20))
                    path.addArc(center: CGPoint(x: 0, y: 20), radius: 30, startAngle: .degrees(180), endAngle: .degrees(0), clockwise: true)
                }
                .stroke(Color.white, lineWidth: 8)
                .offset(x: 62, y: 50) // Adjust the offset values as needed
            }
        }
    }
}


let contentView = ContentView()

PlaygroundPage.current.liveView = UIHostingController(rootView: contentView)
PlaygroundPage.current.needsIndefiniteExecution = true


End of Challenge!

